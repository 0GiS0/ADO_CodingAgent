trigger: none

pool:
  vmImage: ubuntu-latest

resources:
  webhooks:
    - webhook: myWebhookResource
      connection: GHCopilotWH

steps:
  - checkout: none
  - script: echo "🚀 Webhook triggered pipeline started!"
    displayName: Starting message

  - bash: |
      # Access webhook data as parameter
      echo "🔔 Processing webhook payload..."
      echo "═══════════════════════════════════════════════════════════"
      echo "📋 WEBHOOK INFORMATION"
      echo "═══════════════════════════════════════════════════════════"
      echo ""
      echo "🔖 Event Type: ${{ parameters.myWebhookResource.eventType }}"
      echo "🆔 Subscription ID: ${{ parameters.myWebhookResource.subscriptionId }}"
      echo "🔑 Notification ID: ${{ parameters.myWebhookResource.notificationId }}"
      echo "🎯 Event ID: ${{ parameters.myWebhookResource.id }}"
      echo "📡 Publisher ID: ${{ parameters.myWebhookResource.publisherId }}"
      echo "📅 Created Date: ${{ parameters.myWebhookResource.createdDate }}"
      echo ""
      echo "═══════════════════════════════════════════════════════════"
      echo "🗂️  RESOURCE CONTAINERS"
      echo "═══════════════════════════════════════════════════════════"
      echo ""
      echo "📦 Collection ID: ${{ parameters.myWebhookResource.resourceContainers.collection.id }}"
      echo "🏢 Account ID: ${{ parameters.myWebhookResource.resourceContainers.account.id }}"
      echo "📁 Project ID: ${{ parameters.myWebhookResource.resourceContainers.project.id }}"
      echo ""
      echo "═══════════════════════════════════════════════════════════"
    displayName: Display webhook information 📊

  - bash: |
      echo "🔍 Fetching Work Item details using Azure DevOps CLI..."
      echo ""
      
      # Note: Azure DevOps CLI is pre-installed on Microsoft-hosted agents
      # The System.AccessToken is automatically available
      
      # Get the work item ID from the webhook resource (if available)
      # For workitem.created events, we may need to extract it from resource
      
      # Configure Azure DevOps CLI with the organization
      export AZURE_DEVOPS_EXT_PAT=$(System.AccessToken)
      az devops configure --defaults organization=https://dev.azure.com/returngisorg project=be9b3917-87e6-42a4-a549-2bc06a7a878f
      
      # Try to get work item ID from resource.id (adjust based on actual payload structure)
      workItemId="${{ parameters.myWebhookResource.resource.id }}"
      
      if [ -z "$workItemId" ] || [ "$workItemId" = "" ]; then
        echo "⚠️ Work Item ID not found in webhook payload"
        echo "📋 Webhook may not contain resource data for this event type"
        exit 0
      fi
      
      echo "🆔 Work Item ID: $workItemId"
      echo ""
      echo "═══════════════════════════════════════════════════════════"
      echo "📝 WORK ITEM DETAILS"
      echo "═══════════════════════════════════════════════════════════"
      
      # Get work item details in JSON format
      workItemJson=$(az boards work-item show --id "$workItemId" --output json)
      
      # Extract and display key fields
      echo ""
      echo "📌 Title: $(echo "$workItemJson" | jq -r '.fields."System.Title"')"
      echo "📊 State: $(echo "$workItemJson" | jq -r '.fields."System.State"')"
      echo "🏷️  Work Item Type: $(echo "$workItemJson" | jq -r '.fields."System.WorkItemType"')"
      echo "👤 Created By: $(echo "$workItemJson" | jq -r '.fields."System.CreatedBy".displayName')"
      echo "📅 Created Date: $(echo "$workItemJson" | jq -r '.fields."System.CreatedDate"')"
      echo "👥 Assigned To: $(echo "$workItemJson" | jq -r '.fields."System.AssignedTo".displayName // "Unassigned"')"
      echo "📝 Description: $(echo "$workItemJson" | jq -r '.fields."System.Description" // "No description"')"
      echo "🔗 URL: $(echo "$workItemJson" | jq -r '.url')"
      echo ""
      echo "═══════════════════════════════════════════════════════════"
      
      # Save full work item details to file
      echo "$workItemJson" | jq . > "$(System.DefaultWorkingDirectory)/WorkItemDetails.json"
      echo "💾 Full work item details saved to WorkItemDetails.json"
      
      # Set variables for later use
      echo "##vso[task.setvariable variable=WorkItemId]$workItemId"
      echo "##vso[task.setvariable variable=WorkItemTitle]$(echo "$workItemJson" | jq -r '.fields."System.Title"')"
      echo "##vso[task.setvariable variable=WorkItemAssignedTo]$(echo "$workItemJson" | jq -r '.fields."System.AssignedTo".displayName // "Unassigned"')"
      
    displayName: Get Work Item details with Azure DevOps CLI 🔎
    env:
      AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)

  # - bash: |
  #     # Access webhook data as parameter
  #     echo "🔔 Processing webhook payload..."
  #     echo ${{ parameters.WebHook }}


  #     payload=${{ parameters.WebHook.message }}

  #     if [ -z "$payload" ] || [ "$payload" = "" ]; then
  #       echo "⚠️ No payload received in the webhook trigger."
  #       exit 1
  #     fi

  #     echo "📥 Webhook payload (raw):"
  #     echo "$payload"

  #     workItemId=""
  #     workItemUrl=""
  #     workItemTitle=""
  #     summaryPath="$(pwd)/WebHookPayload.md"
  #     jsonPath="$(pwd)/WebHookPayload.json"

  #     # Try to pretty-print and extract fields
  #     if echo "$payload" | jq . > /dev/null 2>&1; then
  #       # Valid JSON - pretty print it
  #       echo "$payload" | jq . > "$jsonPath"
        
  #       # Extract work item fields
  #       workItemId=$(echo "$payload" | jq -r '.resource.id // empty' 2>/dev/null)
  #       workItemUrl=$(echo "$payload" | jq -r '.resource.url // empty' 2>/dev/null)
  #       workItemTitle=$(echo "$payload" | jq -r '.resource.fields."System.Title" // empty' 2>/dev/null)

  #       if [ -n "$workItemId" ]; then
  #         echo "🆔 Work item ID: $workItemId"
  #         echo "##vso[task.setvariable variable=WorkItemId]$workItemId"
  #       fi

  #       if [ -n "$workItemUrl" ]; then
  #         echo "🔗 Work item URL: $workItemUrl"
  #         echo "##vso[task.setvariable variable=WorkItemUrl]$workItemUrl"
  #       fi

  #       if [ -n "$workItemTitle" ]; then
  #         echo "📝 Work item Title: $workItemTitle"
  #         echo "##vso[task.setvariable variable=WorkItemTitle]$workItemTitle"
  #       fi
  #     else
  #       # Invalid JSON - save raw payload
  #       echo "⚠️ Warning: Failed to parse payload as JSON"
  #       echo "$payload" > "$jsonPath"
  #     fi

  #     # Create summary markdown
  #     {
  #       echo "# Webhook payload 📦"
        
  #       if [ -n "$workItemId" ]; then
  #         echo "- 🆔 Work item ID: $workItemId"
  #       fi
        
  #       if [ -n "$workItemUrl" ]; then
  #         echo "- 🔗 Work item URL: $workItemUrl"
  #       fi
        
  #       if [ -n "$workItemTitle" ]; then
  #         echo "- 📝 Work item Title: $workItemTitle"
  #       fi
        
  #       if [ -z "$workItemId" ] && [ -z "$workItemUrl" ] && [ -z "$workItemTitle" ]; then
  #         echo "- ℹ️ No predefined fields could be extracted from the payload."
  #       fi
        
  #       echo ""
        
  #       if [ -s "$jsonPath" ] && jq . "$jsonPath" > /dev/null 2>&1; then
  #         echo "## Payload JSON ✨"
  #         echo '```json'
  #         cat "$jsonPath"
  #         echo '```'
  #       else
  #         echo "## Raw payload 📄"
  #         echo '```'
  #         echo "$payload"
  #         echo '```'
  #       fi
  #     } > "$summaryPath"

  #     echo "##vso[task.uploadsummary]$summaryPath"
  #   displayName: Process webhook payload 📨

  # - task: PublishPipelineArtifact@1
  #   displayName: Publish webhook payload 📤
  #   inputs:
  #     targetPath: $(System.DefaultWorkingDirectory)/WebHookPayload.json
  #     artifact: webhook-payload
  #   condition: always()