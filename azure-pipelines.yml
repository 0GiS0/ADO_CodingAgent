trigger: none

pool:
  vmImage: ubuntu-latest

resources:
  webhooks:
    - webhook: myWebhookResource
      connection: GHCopilotWH

variables:
  - group: "GitHub Copilot CLI"
  - name: MODEL
    value: claude-sonnet-4
  - name: COPILOT_VERSION
    value: "0.0.339"

steps:
  - script: echo "🚀 Webhook triggered pipeline started!"
    displayName: 🚀 Start Pipeline

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.x'
      addToPath: true
      architecture: 'x64'
    displayName: 🐍 Setup Python (Latest)

  - bash: |
      echo "Installing uvx (pipx runner)..."
      pip install --upgrade pip
      pip install uv
      echo "✅ Python and uv installed"
      python --version
      uv --version
    displayName: 📦 Install uv/uvx

  - task: NodeTool@0
    inputs:
      versionSource: "spec"
      versionSpec: "22.x"     
    displayName: ⚙️ Setup Node.js 22.x

  - bash: |
      $(System.DefaultWorkingDirectory)/scripts/parse-webhook-data.sh
    displayName: 📋 Parse Webhook Data
    env:
      EVENT_TYPE: ${{ parameters.myWebhookResource.eventType }}
      WORK_ITEM_ID: ${{ parameters.myWebhookResource.resource.id }}
      WORK_ITEM_TITLE: ${{ parameters.myWebhookResource.resource.fields['System.Title'] }}
      WORK_ITEM_TYPE: ${{ parameters.myWebhookResource.resource.fields['System.WorkItemType'] }}
      WORK_ITEM_STATE: ${{ parameters.myWebhookResource.resource.fields['System.State'] }}
      WORK_ITEM_CREATED_BY: ${{ parameters.myWebhookResource.resource.fields['System.CreatedBy'] }}
      WORK_ITEM_ASSIGNED_TO: ${{ parameters.myWebhookResource.resource.fields['System.AssignedTo'] }}
      WORK_ITEM_DESCRIPTION: ${{ parameters.myWebhookResource.resource.fields['System.Description'] }}
      PROJECT_NAME: ${{ parameters.myWebhookResource.resource.fields['System.TeamProject'] }}
      WORK_ITEM_TAGS: ${{ parameters.myWebhookResource.resource.fields['System.Tags'] }}
      CURRENT_REPO: $(Build.Repository.Name)
      WORKING_DIR: $(System.DefaultWorkingDirectory)

  - template: templates/run-script.yml
    parameters:
      script: clone-target-repo.sh
      args: '"$(TargetRepoName)" "$(ProjectName)" "$(Build.Repository.Name)"'
      displayName: 🛎️ Clone Target Repository

  - bash: |
      NPM_PREFIX=$(npm config get prefix)
      echo "##vso[task.setvariable variable=NPM_GLOBAL_PATH]${NPM_PREFIX}/lib/node_modules"
      echo "NPM global path: ${NPM_PREFIX}/lib/node_modules"
    displayName: 🔍 Detect NPM Global Path

  - task: Cache@2
    inputs:
      key: 'npm-global | "$(Agent.OS)" | "copilot" | "$(COPILOT_VERSION)"'
      path: $(NPM_GLOBAL_PATH)
      restoreKeys: |
        npm-global | "$(Agent.OS)" | "copilot"
    displayName: 📦 Cache Global NPM Packages

  - bash: |
      if ! command -v copilot &> /dev/null; then
        echo "Installing @github/copilot..."
        npm install -g @github/copilot
      else
        echo "✅ @github/copilot already installed (from cache)"
        copilot --version
      fi
    displayName: 📦 Install Copilot CLI

  - bash: |
      mkdir -p ~/.copilot
      cp $(System.DefaultWorkingDirectory)/mcp-config.json ~/.copilot/mcp-config.json
      echo "✅ MCP configuration copied to ~/.copilot/mcp-config.json"
      cat ~/.copilot/mcp-config.json
    displayName: ⚙️ Configure MCP Servers

  - bash: |
      mkdir -p ~/.copilot
      cp $(System.DefaultWorkingDirectory)/.github/copilot-instructions.md ~/.copilot/copilot-instructions.md
      echo "✅ Copilot instructions copied to ~/.copilot/"
    displayName: 📋 Copy Copilot Instructions

  - template: templates/run-script.yml
    parameters:
      script: get-workitem.sh
      args: '$(WorkItemId) "$(ProjectName)"'
      displayName: 📖 Read Work Item Details

  - template: templates/run-script.yml
    parameters:
      script: orchestrate-workitem.sh
      args: 'start $(WorkItemId) "" "$(Organization)" "$(ProjectName)" "$(WorkItemTitle)" "$(WorkItemCreatedBy)" ""'
      displayName: 🚀 Initialize Work Item

  - bash: |
      echo "🌿 Creating feature branch..."
      cd "$(TargetRepoDir)"
      git checkout -b copilot/$(WorkItemId)
      echo "✅ Branch copilot/$(WorkItemId) created"
    displayName: 🌿 Create Feature Branch

  - bash: |
      echo "🧰 Check MCP access"
      copilot -p "List tools defined in the current chat session (do not run commands, I am asking about tools defined in the LLM). Just the names in a table, nothing else." --allow-all-tools
    displayName: 🧰 Check MCP Access
    env:
      GH_TOKEN: $(GH_TOKEN)
      AZURE_DEVOPS_PAT: $(AZURE_DEVOPS_EXT_PAT)
      CONTEXT7_API_KEY: $(CONTEXT7_API_KEY)

  - bash: |
      echo "🤖 Running GitHub Copilot CLI..."
      echo "═══════════════════════════════════════════════════════════"
      echo "📋 Work Item: $(WorkItemId)"
      echo "📌 Title: $(WorkItemTitle)"
      echo "📁 Project: $(ProjectName)"
      echo "📦 Repository: $(TargetRepoName)"
      echo "═══════════════════════════════════════════════════════════"

      cd "$(TargetRepoDir)"

      # Run Copilot
      copilot -p "Implement the work item: Title: $(WorkItemTitle) Description: $(WorkItemDescription)" \
        --allow-all-tools \
        --log-level all \
        --log-dir ../logs \
        --model $(MODEL)

      echo "✅ Implementation completed"
    displayName: 🤖 Implement Changes with Copilot
    env:
      GH_TOKEN: $(GH_TOKEN)
      AZURE_DEVOPS_PAT: $(AZURE_DEVOPS_EXT_PAT)
      CONTEXT7_API_KEY: $(CONTEXT7_API_KEY)

  - template: templates/run-script.yml
    parameters:
      script: prepare-commit.sh
      args: '$(WorkItemId) "$(WorkItemTitle)" "$(ProjectName)"'
      displayName: 💾 Commit Changes
      workingDirectory: $(TargetRepoDir)

  - template: templates/run-script.yml
    parameters:
      script: push-branch.sh
      args: '"$(Organization)" "$(ProjectName)" "$(TargetRepoName)" "copilot/$(WorkItemId)"'
      displayName: 🚀 Push Branch
      workingDirectory: $(TargetRepoDir)

  - template: templates/run-script.yml
    parameters:
      script: link-branch-to-workitem.sh
      args: '$(WorkItemId) "$(ProjectName)" "$(TargetRepoName)" "copilot/$(WorkItemId)"'
      displayName: 🔗 Link Branch to Work Item

  - template: templates/run-script.yml
    parameters:
      script: update-workitem-activity.sh
      args: '"$(Organization)" "$(ProjectName)" $(WorkItemId) "Development"'
      displayName: 🔧 Update Activity

  - template: templates/run-script.yml
    parameters:
      script: create-pr-and-link.sh
      args: '"$(Organization)" "$(ProjectName)" "$(TargetRepoName)" $(WorkItemId) "$(WorkItemTitle)" "$(CreatorEmail)" "copilot/$(WorkItemId)"'
      displayName: 📬 Create PR and Link
      workingDirectory: $(TargetRepoDir)

  - template: templates/run-script.yml
    parameters:
      script: add-completion-comment.sh
      args: '"$(Organization)" "$(ProjectName)" $(WorkItemId) "$(WorkItemCreatedBy)" "$(PrUrl)"'
      displayName: 💬 Add Completion Comment

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: "logs"
      artifact: "copilot-logs"
    displayName: 📦 Publish Logs
    condition: always()
