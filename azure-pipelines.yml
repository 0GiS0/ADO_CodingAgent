trigger: none

pool:
  vmImage: ubuntu-latest

resources:
  webhooks:
    - webhook: myWebhookResource
      connection: GHCopilotWH

variables:
  - group: 'GitHub Copilot CLI'
  # No puedes definir env variables aquí, pero puedes usarlas con $(variable)
  # Las variables del Variable Group están disponibles como $(GH_TOKEN) y $(AZURE_DEVOPS_EXT_PAT)

steps:
  - script: echo "🚀 Webhook triggered pipeline started!"
    displayName: 🚀 Start Pipeline

  - task: NodeTool@0
    inputs:
      versionSource: 'spec'
      versionSpec: '22.x'
      checkLatest: true
    displayName: ⚙️ Setup Node.js 22.x

  - bash: |
      # Access webhook data as parameter
      echo "🔔 Processing webhook payload..."
      echo "═══════════════════════════════════════════════════════════"
      echo "📋 WEBHOOK INFORMATION"
      echo "═══════════════════════════════════════════════════════════"
      echo ""
      echo "🔖 Event Type: ${{ parameters.myWebhookResource.eventType }}"
      echo "🆔 Subscription ID: ${{ parameters.myWebhookResource.subscriptionId }}"
      echo "🔑 Notification ID: ${{ parameters.myWebhookResource.notificationId }}"
      echo "🎯 Event ID: ${{ parameters.myWebhookResource.id }}"
      echo "📡 Publisher ID: ${{ parameters.myWebhookResource.publisherId }}"
      echo "📅 Created Date: ${{ parameters.myWebhookResource.createdDate }}"
      echo "🔢 Resource Version: ${{ parameters.myWebhookResource.resourceVersion }}"
      echo ""
      echo "═══════════════════════════════════════════════════════════"
      echo "💬 MESSAGE"
      echo "═══════════════════════════════════════════════════════════"
      echo ""
      echo "${{ parameters.myWebhookResource.message.text }}"
      echo ""
      echo "═══════════════════════════════════════════════════════════"
      echo "📝 WORK ITEM DETAILS (from webhook)"
      echo "═══════════════════════════════════════════════════════════"
      echo ""
      echo "🆔 Work Item ID: ${{ parameters.myWebhookResource.resource.id }}"
      echo "🔄 Revision: ${{ parameters.myWebhookResource.resource.rev }}"
      echo "📌 Title: ${{ parameters.myWebhookResource.resource.fields['System.Title'] }}"
      echo "🏷️  Type: ${{ parameters.myWebhookResource.resource.fields['System.WorkItemType'] }}"
      echo "📊 State: ${{ parameters.myWebhookResource.resource.fields['System.State'] }}"
      echo "❓ Reason: ${{ parameters.myWebhookResource.resource.fields['System.Reason'] }}"
      echo "🎯 Priority: ${{ parameters.myWebhookResource.resource.fields['Microsoft.VSTS.Common.Priority'] }}"
      echo ""
      echo "📄 Description:"
      echo "${{ parameters.myWebhookResource.resource.fields['System.Description'] }}"
      echo ""
      echo "👤 Created By: ${{ parameters.myWebhookResource.resource.fields['System.CreatedBy'] }}"
      echo "📅 Created Date: ${{ parameters.myWebhookResource.resource.fields['System.CreatedDate'] }}"
      echo ""
      echo "👥 Assigned To: ${{ parameters.myWebhookResource.resource.fields['System.AssignedTo'] }}"
      echo ""
      echo "🔄 Changed By: ${{ parameters.myWebhookResource.resource.fields['System.ChangedBy'] }}"
      echo "📅 Changed Date: ${{ parameters.myWebhookResource.resource.fields['System.ChangedDate'] }}"
      echo ""
      echo "📂 Area Path: ${{ parameters.myWebhookResource.resource.fields['System.AreaPath'] }}"
      echo "🔁 Iteration Path: ${{ parameters.myWebhookResource.resource.fields['System.IterationPath'] }}"
      echo "📁 Team Project: ${{ parameters.myWebhookResource.resource.fields['System.TeamProject'] }}"
      echo ""
      echo "⚠️  Severity: ${{ parameters.myWebhookResource.resource.fields['Microsoft.VSTS.Common.Severity'] }}"
      echo "📋 Kanban Column: ${{ parameters.myWebhookResource.resource.fields['WEF_EB329F44FE5F4A94ACB1DA153FDF38BA_Kanban.Column'] }}"
      echo ""
      echo "🔗 Work Item URL: ${{ parameters.myWebhookResource.resource.url }}"
      echo ""
      echo "═══════════════════════════════════════════════════════════"
      
      # Set pipeline variables for later use
      echo "##vso[task.setvariable variable=WorkItemId]${{ parameters.myWebhookResource.resource.id }}"
      echo "##vso[task.setvariable variable=WorkItemTitle]${{ parameters.myWebhookResource.resource.fields['System.Title'] }}"
      echo "##vso[task.setvariable variable=WorkItemType]${{ parameters.myWebhookResource.resource.fields['System.WorkItemType'] }}"
      echo "##vso[task.setvariable variable=WorkItemState]${{ parameters.myWebhookResource.resource.fields['System.State'] }}"
      echo "##vso[task.setvariable variable=WorkItemCreatedBy]${{ parameters.myWebhookResource.resource.fields['System.CreatedBy'] }}"
      echo "##vso[task.setvariable variable=WorkItemAssignedTo]${{ parameters.myWebhookResource.resource.fields['System.AssignedTo'] }}"
      echo "##vso[task.setvariable variable=WorkItemDescription]${{ parameters.myWebhookResource.resource.fields['System.Description'] }}"
      echo "##vso[task.setvariable variable=ProjectName]${{ parameters.myWebhookResource.resource.fields['System.TeamProject'] }}"
    displayName: 📋 Parse Webhook Data

  - bash: |
      npm install -g @github/copilot     
    displayName: 📦 Install Copilot CLI

  - bash: |
      echo "🔍 Verificando variables de entorno..."
      echo ""
      
      if [ -z "$GH_TOKEN" ]; then
        echo "❌ ERROR: GH_TOKEN no está definido o está vacío"
        exit 1
      else
        echo "✅ GH_TOKEN está definido (longitud: ${#GH_TOKEN} caracteres)"
      fi
      
      if [ -z "$AZURE_DEVOPS_PAT" ]; then
        echo "❌ ERROR: AZURE_DEVOPS_PAT no está definido o está vacío"
        exit 1
      else
        echo "✅ AZURE_DEVOPS_PAT está definido (longitud: ${#AZURE_DEVOPS_PAT} caracteres)"
      fi
      
      echo ""
      echo "✅ Todas las variables necesarias están configuradas correctamente"
    displayName: ✅ Verify Credentials
    env:
      GH_TOKEN: $(GH_TOKEN)
      AZURE_DEVOPS_PAT: $(AZURE_DEVOPS_EXT_PAT)

  # - bash: |
  #     echo "🤖 Running GitHub Copilot CLI to test that it works"     
  #     copilot -p "Puedes decirme de qué trata este proyecto" --allow-all-tools
  #   displayName: 🤖 Verify GitHub Copilot CLI Installation
  #   env:
  #     GH_TOKEN: $(GH_TOKEN)
  # - bash: |
  #     cp mcp-config.json ~/.copilot/mcp-config.json
  #   displayName: Copiar el archivo de los MCP servers en ~/.copilot

  # - bash: |
  #     echo "🤖 Running GitHub Copilot CLI to get work item details"
  #     copilot \
  #     -p "Get the details of work item ID $(WorkItemId) from Azure DevOps project '$(ProjectName)'. Show me all the information including title, description, assigned to, state, and any other relevant fields." \
  #     --allow-all-tools \
  #     --log-level debug \
  #     --log-dir ./logs
  #   displayName: 🤖 Get Work Item details via Copilot CLI
  #   env:
  #     GH_TOKEN: $(GH_TOKEN)
  #     AZURE_DEVOPS_EXT_PAT: $(AZURE_DEVOPS_EXT_PAT)

  - bash: |
      echo "🤖 Running GitHub Copilot CLI to implement changes"
      copilot \
      -p "Quiero implementar los cambios necesarios en el work item $(WorkItemId) de Azure DevOps project '$(ProjectName)'" \
      --allow-all-tools \
      --log-level debug \
      --log-dir ./logs
    displayName: 🚀 Implement Changes
    env:
      GH_TOKEN: $(GH_TOKEN)
      AZURE_DEVOPS_PAT: $(AZURE_DEVOPS_EXT_PAT)

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: 'logs'
      artifact: 'copilot-logs'
    displayName: � Publish Logs
